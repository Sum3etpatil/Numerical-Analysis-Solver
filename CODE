# Numerical-Analysis-Solver
// Unified Numerical Analysis Solver

function result = solve_non_linear_eqn(method, f, df, x0, tol, max_iter)
    if method == "bisection"
        result = bisection(f, x0(1), x0(2), tol);
    elseif method == "newton"
        result = newton(f, df, x0, tol);
    elseif method == "secant"
        result = secant(f, x0(1), x0(2), tol);
    else
        disp("Invalid method");
        result = [];
    end
endfunction

function root = bisection(f, a, b, tol)
    if f(a) * f(b) >= 0
        disp("Function has the same sign at a and b");
        return;
    end
    while (b - a) / 2 > tol
        c = (a + b) / 2;
        if f(c) == 0
            break;
        elseif f(c) * f(a) < 0
            b = c;
        else
            a = c;
        end
    end
    root = (a + b) / 2;
endfunction

function root = newton(f, df, x0, tol)
    x = x0;
    while abs(f(x)) > tol
        x = x - f(x) / df(x);
    end
    root = x;
endfunction

function root = secant(f, x0, x1, tol)
    while abs(x1 - x0) > tol
        x2 = x1 - f(x1) * (x1 - x0) / (f(x1) - f(x0));
        x0 = x1;
        x1 = x2;
    end
    root = x1;
endfunction

function result = solve_linear_system(method, A, b, tol, max_iter)
    if method == "gauss_elimination"
        result = gauss_elimination(A, b);
    elseif method == "jacobi"
        result = jacobi(A, b, tol, max_iter);
    elseif method == "gauss_seidel"
        result = gauss_seidel(A, b, tol, max_iter);
    else
        disp("Invalid method");
        result = [];
    end
endfunction

function x = gauss_elimination(A, b)
    n = size(A, 1);
    Aug = [A, b];
    for i = 1:n
        Aug(i,:) = Aug(i,:) / Aug(i,i);
        for j = i+1:n
            Aug(j,:) = Aug(j,:) - Aug(j,i) * Aug(i,:);
        end
    end
    x = zeros(n, 1);
    for i = n:-1:1
        x(i) = Aug(i, n+1) - Aug(i, 1:n) * x;
    end
endfunction

function x = jacobi(A, b, tol, max_iter)
    n = size(A, 1);
    x = zeros(n, 1);
    for k = 1:max_iter
        x_new = zeros(n, 1);
        for i = 1:n
            sum = 0;
            for j = 1:n
                if i != j
                    sum = sum + A(i, j) * x(j);
                end
            end
            x_new(i) = (b(i) - sum) / A(i, i);
        end
        if norm(x_new - x) < tol
            break;
        end
        x = x_new;
    end
endfunction

function x = gauss_seidel(A, b, tol, max_iter)
    n = size(A, 1);
    x = zeros(n, 1);
    for k = 1:max_iter
        x_new = x;
        for i = 1:n
            sum = 0;
            for j = 1:n
                if i != j
                    sum = sum + A(i, j) * x_new(j);
                end
            end
            x_new(i) = (b(i) - sum) / A(i, i);
        end
        if norm(x_new - x) < tol
            break;
        end
        x = x_new;
    end
endfunction

function result = solve_interpolation(method, x, y, x_interp)
    if method == "lagrange"
        result = lagrange(x, y, x_interp);
    else
        disp("Invalid method");
        result = [];
    end
endfunction

function y_interp = lagrange(x, y, x_interp)
    n = length(x);
    y_interp = 0;
    for i = 1:n
        term = y(i);
        for j = 1:n
            if j != i
                term = term * (x_interp - x(j)) / (x(i) - x(j));
            end
        end
        y_interp = y_interp + term;
    end
endfunction

function result = solve_integration(method, f, a, b, n)
    if method == "trapezoidal"
        result = trapezoidal(f, a, b, n);
    elseif method == "simpsons"
        result = simpsons(f, a, b, n);
    else
        disp("Invalid method");
        result = [];
    end
endfunction

function integral = trapezoidal(f, a, b, n)
    h = (b - a) / n;
    sum = f(a) + f(b);
    for i = 1:n-1
        sum = sum + 2 * f(a + i * h);
    end
    integral = sum * h / 2;
endfunction

function integral = simpsons(f, a, b, n)
    h = (b - a) / (2 * n);
    sum = f(a) + f(b);
    for i = 1:2*n-1
        if mod(i, 2) == 0
            sum = sum + 4 * f(a + i * h);
        else
            sum = sum + 2 * f(a + i * h);
        end
    end
    integral = sum * h / 3;
endfunction

function result = solve_ode(method, f, y0, x0, h, n)
    if method == "euler"
        result = euler_method(f, y0, x0, h, n);
    elseif method == "runge_kutta"
        result = runge_kutta(f, y0, x0, h, n);
    else
        disp("Invalid method");
        result = [];
    end
endfunction

function y = euler_method(f, y0, x0, h, n)
    x = x0;
    y = y0;
    for i = 1:n
        y = y + h * f(x, y);
        x = x + h;
    end
endfunction

function y = runge_kutta(f, y0, x0, h, n)
    x = x0;
    y = y0;
    for i = 1:n
        k1 = f(x, y);
        k2 = f(x + h/2, y + h*k1/2);
        k3 = f(x + h/2, y + h*k2/2);
        k4 = f(x + h, y + h*k3);
        y = y + h/6 * (k1 + 2*k2 + 2*k3 + k4);
        x = x + h;
    end
endfunction

// Main Solver Execution
// Specify method, equation, and parameters here

// Example 1: Solving Nonlinear Equation using Bisection Method
f = @(x) x^3 - 4*x^2 + 6;  // Example function
df = @(x) 3*x^2 - 8*x;    // Derivative of the function
x0 = [1, 2];  // Interval
tol = 1e-6;
root = solve_non_linear_eqn("bisection", f, df, x0, tol, 100);
disp("Root using Bisection: ", root);

// Example 2: Solving Linear System using Gaussian Elimination
A = [2, 1, -1; -3, -1, 2; -2, 1, 2];
b = [8; -11; -3];
x = solve_linear_system("gauss_elimination", A, b, 1e-6, 100);
disp("Solution using Gaussian Elimination: ", x);

// Example 3: Solving ODE using Euler's Method
f = @(x, y) x + y;  // Example ODE: dy/dx = x + y
y0 = 1;
x0 = 0;
h = 0.1;
n = 10;
y = solve_ode("euler", f, y0, x0, h, n);
disp("Solution using Euler's Method: ", y);
